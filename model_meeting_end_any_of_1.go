/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package libattio

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MeetingEndAnyOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeetingEndAnyOf1{}

// MeetingEndAnyOf1 struct for MeetingEndAnyOf1
type MeetingEndAnyOf1 struct {
	// If an all day event, a date representing when the meeting ends.
	Date string `json:"date"`
}

type _MeetingEndAnyOf1 MeetingEndAnyOf1

// NewMeetingEndAnyOf1 instantiates a new MeetingEndAnyOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeetingEndAnyOf1(date string) *MeetingEndAnyOf1 {
	this := MeetingEndAnyOf1{}
	this.Date = date
	return &this
}

// NewMeetingEndAnyOf1WithDefaults instantiates a new MeetingEndAnyOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeetingEndAnyOf1WithDefaults() *MeetingEndAnyOf1 {
	this := MeetingEndAnyOf1{}
	return &this
}

// GetDate returns the Date field value
func (o *MeetingEndAnyOf1) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *MeetingEndAnyOf1) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *MeetingEndAnyOf1) SetDate(v string) {
	o.Date = v
}


func (o MeetingEndAnyOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeetingEndAnyOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["date"] = o.Date
	return toSerialize, nil
}

func (o *MeetingEndAnyOf1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"date",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varMeetingEndAnyOf1 := _MeetingEndAnyOf1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMeetingEndAnyOf1)

	if err != nil {
		return err
	}

	*o = MeetingEndAnyOf1(varMeetingEndAnyOf1)

	return err
}

type NullableMeetingEndAnyOf1 struct {
	value *MeetingEndAnyOf1
	isSet bool
}

func (v NullableMeetingEndAnyOf1) Get() *MeetingEndAnyOf1 {
	return v.value
}

func (v *NullableMeetingEndAnyOf1) Set(val *MeetingEndAnyOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableMeetingEndAnyOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableMeetingEndAnyOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeetingEndAnyOf1(val *MeetingEndAnyOf1) *NullableMeetingEndAnyOf1 {
	return &NullableMeetingEndAnyOf1{value: val, isSet: true}
}

func (v NullableMeetingEndAnyOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeetingEndAnyOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


