/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package libattio

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InputValueAnyOf10 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InputValueAnyOf10{}

// InputValueAnyOf10 struct for InputValueAnyOf10
type InputValueAnyOf10 struct {
	// The UUID or status title identifying the selected status.
	Status string `json:"status"`
}

type _InputValueAnyOf10 InputValueAnyOf10

// NewInputValueAnyOf10 instantiates a new InputValueAnyOf10 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInputValueAnyOf10(status string) *InputValueAnyOf10 {
	this := InputValueAnyOf10{}
	this.Status = status
	return &this
}

// NewInputValueAnyOf10WithDefaults instantiates a new InputValueAnyOf10 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInputValueAnyOf10WithDefaults() *InputValueAnyOf10 {
	this := InputValueAnyOf10{}
	return &this
}

// GetStatus returns the Status field value
func (o *InputValueAnyOf10) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *InputValueAnyOf10) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *InputValueAnyOf10) SetStatus(v string) {
	o.Status = v
}


func (o InputValueAnyOf10) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InputValueAnyOf10) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *InputValueAnyOf10) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varInputValueAnyOf10 := _InputValueAnyOf10{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInputValueAnyOf10)

	if err != nil {
		return err
	}

	*o = InputValueAnyOf10(varInputValueAnyOf10)

	return err
}

type NullableInputValueAnyOf10 struct {
	value *InputValueAnyOf10
	isSet bool
}

func (v NullableInputValueAnyOf10) Get() *InputValueAnyOf10 {
	return v.value
}

func (v *NullableInputValueAnyOf10) Set(val *InputValueAnyOf10) {
	v.value = val
	v.isSet = true
}

func (v NullableInputValueAnyOf10) IsSet() bool {
	return v.isSet
}

func (v *NullableInputValueAnyOf10) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInputValueAnyOf10(val *InputValueAnyOf10) *NullableInputValueAnyOf10 {
	return &NullableInputValueAnyOf10{value: val, isSet: true}
}

func (v NullableInputValueAnyOf10) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInputValueAnyOf10) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


