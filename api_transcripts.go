/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package libattio

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TranscriptsAPIService TranscriptsAPI service
type TranscriptsAPIService service

type ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptDeleteRequest struct {
	ctx context.Context
	ApiService *TranscriptsAPIService
	meetingId string
	callRecordingId string
}

func (r ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptDeleteRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptDeleteExecute(r)
}

/*
V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptDelete Delete call recording transcript

Deletes the transcript for the specified call recording.

Required scopes: `meeting:read`, `call_recording:read-write`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param meetingId
 @param callRecordingId
 @return ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptDeleteRequest
*/
func (a *TranscriptsAPIService) V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptDelete(ctx context.Context, meetingId string, callRecordingId string) ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptDeleteRequest {
	return ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptDeleteRequest{
		ApiService: a,
		ctx: ctx,
		meetingId: meetingId,
		callRecordingId: callRecordingId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *TranscriptsAPIService) V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptDeleteExecute(r ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptDeleteRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TranscriptsAPIService.V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/meetings/{meeting_id}/call_recordings/{call_recording_id}/transcript"
	localVarPath = strings.Replace(localVarPath, "{"+"meeting_id"+"}", url.PathEscape(parameterValueToString(r.meetingId, "meetingId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"call_recording_id"+"}", url.PathEscape(parameterValueToString(r.callRecordingId, "callRecordingId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2MeetingsMeetingIdCallRecordingsCallRecordingIdDelete404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptGetRequest struct {
	ctx context.Context
	ApiService *TranscriptsAPIService
	meetingId string
	callRecordingId string
	cursor *string
}

func (r ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptGetRequest) Cursor(cursor string) ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptGetRequest {
	r.cursor = &cursor
	return r
}

func (r ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptGetRequest) Execute() (*V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptGet200Response, *http.Response, error) {
	return r.ApiService.V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptGetExecute(r)
}

/*
V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptGet Get call transcript

Get the transcript for a call recording.

Required scopes: `meeting:read`, `call_recording:read`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param meetingId
 @param callRecordingId
 @return ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptGetRequest
*/
func (a *TranscriptsAPIService) V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptGet(ctx context.Context, meetingId string, callRecordingId string) ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptGetRequest {
	return ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptGetRequest{
		ApiService: a,
		ctx: ctx,
		meetingId: meetingId,
		callRecordingId: callRecordingId,
	}
}

// Execute executes the request
//  @return V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptGet200Response
func (a *TranscriptsAPIService) V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptGetExecute(r ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptGetRequest) (*V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TranscriptsAPIService.V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/meetings/{meeting_id}/call_recordings/{call_recording_id}/transcript"
	localVarPath = strings.Replace(localVarPath, "{"+"meeting_id"+"}", url.PathEscape(parameterValueToString(r.meetingId, "meetingId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"call_recording_id"+"}", url.PathEscape(parameterValueToString(r.callRecordingId, "callRecordingId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostRequest struct {
	ctx context.Context
	ApiService *TranscriptsAPIService
	meetingId string
	callRecordingId string
	v2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostRequest *V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostRequest
}

func (r ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostRequest) V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostRequest(v2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostRequest V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostRequest) ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostRequest {
	r.v2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostRequest = &v2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostRequest
	return r
}

func (r ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostRequest) Execute() (*V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPost200Response, *http.Response, error) {
	return r.ApiService.V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostExecute(r)
}

/*
V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPost Create transcript

Creates a transcript for the specified call recording. Each call recording can have only one associated transcript. Once created, transcripts are immutable and cannot be modified. To update a transcript, you must first delete the existing one and then create a new transcript.

Required scopes: `meeting:read`, `call_recording:read-write`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param meetingId
 @param callRecordingId
 @return ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostRequest
*/
func (a *TranscriptsAPIService) V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPost(ctx context.Context, meetingId string, callRecordingId string) ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostRequest {
	return ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostRequest{
		ApiService: a,
		ctx: ctx,
		meetingId: meetingId,
		callRecordingId: callRecordingId,
	}
}

// Execute executes the request
//  @return V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPost200Response
func (a *TranscriptsAPIService) V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostExecute(r ApiV2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostRequest) (*V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TranscriptsAPIService.V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/meetings/{meeting_id}/call_recordings/{call_recording_id}/transcript"
	localVarPath = strings.Replace(localVarPath, "{"+"meeting_id"+"}", url.PathEscape(parameterValueToString(r.meetingId, "meetingId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"call_recording_id"+"}", url.PathEscape(parameterValueToString(r.callRecordingId, "callRecordingId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.v2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostRequest == nil {
		return localVarReturnValue, nil, reportError("v2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPost400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v V2MeetingsMeetingIdCallRecordingsCallRecordingIdTranscriptPost404Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
