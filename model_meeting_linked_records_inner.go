/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package libattio

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MeetingLinkedRecordsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeetingLinkedRecordsInner{}

// MeetingLinkedRecordsInner struct for MeetingLinkedRecordsInner
type MeetingLinkedRecordsInner struct {
	// The slug of the object the meeting linked record belongs to.
	ObjectSlug string `json:"object_slug"`
	// The ID of the object the meeting linked record belongs to.
	ObjectId string `json:"object_id"`
	// The ID of the meeting linked record.
	RecordId string `json:"record_id"`
}

type _MeetingLinkedRecordsInner MeetingLinkedRecordsInner

// NewMeetingLinkedRecordsInner instantiates a new MeetingLinkedRecordsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeetingLinkedRecordsInner(objectSlug string, objectId string, recordId string) *MeetingLinkedRecordsInner {
	this := MeetingLinkedRecordsInner{}
	this.ObjectSlug = objectSlug
	this.ObjectId = objectId
	this.RecordId = recordId
	return &this
}

// NewMeetingLinkedRecordsInnerWithDefaults instantiates a new MeetingLinkedRecordsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeetingLinkedRecordsInnerWithDefaults() *MeetingLinkedRecordsInner {
	this := MeetingLinkedRecordsInner{}
	return &this
}

// GetObjectSlug returns the ObjectSlug field value
func (o *MeetingLinkedRecordsInner) GetObjectSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectSlug
}

// GetObjectSlugOk returns a tuple with the ObjectSlug field value
// and a boolean to check if the value has been set.
func (o *MeetingLinkedRecordsInner) GetObjectSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectSlug, true
}

// SetObjectSlug sets field value
func (o *MeetingLinkedRecordsInner) SetObjectSlug(v string) {
	o.ObjectSlug = v
}


// GetObjectId returns the ObjectId field value
func (o *MeetingLinkedRecordsInner) GetObjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value
// and a boolean to check if the value has been set.
func (o *MeetingLinkedRecordsInner) GetObjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectId, true
}

// SetObjectId sets field value
func (o *MeetingLinkedRecordsInner) SetObjectId(v string) {
	o.ObjectId = v
}


// GetRecordId returns the RecordId field value
func (o *MeetingLinkedRecordsInner) GetRecordId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecordId
}

// GetRecordIdOk returns a tuple with the RecordId field value
// and a boolean to check if the value has been set.
func (o *MeetingLinkedRecordsInner) GetRecordIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecordId, true
}

// SetRecordId sets field value
func (o *MeetingLinkedRecordsInner) SetRecordId(v string) {
	o.RecordId = v
}


func (o MeetingLinkedRecordsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeetingLinkedRecordsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object_slug"] = o.ObjectSlug
	toSerialize["object_id"] = o.ObjectId
	toSerialize["record_id"] = o.RecordId
	return toSerialize, nil
}

func (o *MeetingLinkedRecordsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object_slug",
		"object_id",
		"record_id",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varMeetingLinkedRecordsInner := _MeetingLinkedRecordsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMeetingLinkedRecordsInner)

	if err != nil {
		return err
	}

	*o = MeetingLinkedRecordsInner(varMeetingLinkedRecordsInner)

	return err
}

type NullableMeetingLinkedRecordsInner struct {
	value *MeetingLinkedRecordsInner
	isSet bool
}

func (v NullableMeetingLinkedRecordsInner) Get() *MeetingLinkedRecordsInner {
	return v.value
}

func (v *NullableMeetingLinkedRecordsInner) Set(val *MeetingLinkedRecordsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableMeetingLinkedRecordsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableMeetingLinkedRecordsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeetingLinkedRecordsInner(val *MeetingLinkedRecordsInner) *NullableMeetingLinkedRecordsInner {
	return &NullableMeetingLinkedRecordsInner{value: val, isSet: true}
}

func (v NullableMeetingLinkedRecordsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeetingLinkedRecordsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


