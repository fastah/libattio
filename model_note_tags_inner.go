/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/fastah/libattio

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// NoteTagsInner - struct for NoteTagsInner
type NoteTagsInner struct {
	NoteTagsInnerOneOf *NoteTagsInnerOneOf
	NoteTagsInnerOneOf1 *NoteTagsInnerOneOf1
}

// NoteTagsInnerOneOfAsNoteTagsInner is a convenience function that returns NoteTagsInnerOneOf wrapped in NoteTagsInner
func NoteTagsInnerOneOfAsNoteTagsInner(v *NoteTagsInnerOneOf) NoteTagsInner {
	return NoteTagsInner{
		NoteTagsInnerOneOf: v,
	}
}

// NoteTagsInnerOneOf1AsNoteTagsInner is a convenience function that returns NoteTagsInnerOneOf1 wrapped in NoteTagsInner
func NoteTagsInnerOneOf1AsNoteTagsInner(v *NoteTagsInnerOneOf1) NoteTagsInner {
	return NoteTagsInner{
		NoteTagsInnerOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *NoteTagsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into NoteTagsInnerOneOf
	err = newStrictDecoder(data).Decode(&dst.NoteTagsInnerOneOf)
	if err == nil {
		jsonNoteTagsInnerOneOf, _ := json.Marshal(dst.NoteTagsInnerOneOf)
		if string(jsonNoteTagsInnerOneOf) == "{}" { // empty struct
			dst.NoteTagsInnerOneOf = nil
		} else {
			if err = validator.Validate(dst.NoteTagsInnerOneOf); err != nil {
				dst.NoteTagsInnerOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.NoteTagsInnerOneOf = nil
	}

	// try to unmarshal data into NoteTagsInnerOneOf1
	err = newStrictDecoder(data).Decode(&dst.NoteTagsInnerOneOf1)
	if err == nil {
		jsonNoteTagsInnerOneOf1, _ := json.Marshal(dst.NoteTagsInnerOneOf1)
		if string(jsonNoteTagsInnerOneOf1) == "{}" { // empty struct
			dst.NoteTagsInnerOneOf1 = nil
		} else {
			if err = validator.Validate(dst.NoteTagsInnerOneOf1); err != nil {
				dst.NoteTagsInnerOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.NoteTagsInnerOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.NoteTagsInnerOneOf = nil
		dst.NoteTagsInnerOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(NoteTagsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(NoteTagsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NoteTagsInner) MarshalJSON() ([]byte, error) {
	if src.NoteTagsInnerOneOf != nil {
		return json.Marshal(&src.NoteTagsInnerOneOf)
	}

	if src.NoteTagsInnerOneOf1 != nil {
		return json.Marshal(&src.NoteTagsInnerOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NoteTagsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.NoteTagsInnerOneOf != nil {
		return obj.NoteTagsInnerOneOf
	}

	if obj.NoteTagsInnerOneOf1 != nil {
		return obj.NoteTagsInnerOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj NoteTagsInner) GetActualInstanceValue() (interface{}) {
	if obj.NoteTagsInnerOneOf != nil {
		return *obj.NoteTagsInnerOneOf
	}

	if obj.NoteTagsInnerOneOf1 != nil {
		return *obj.NoteTagsInnerOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableNoteTagsInner struct {
	value *NoteTagsInner
	isSet bool
}

func (v NullableNoteTagsInner) Get() *NoteTagsInner {
	return v.value
}

func (v *NullableNoteTagsInner) Set(val *NoteTagsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteTagsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteTagsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteTagsInner(val *NoteTagsInner) *NullableNoteTagsInner {
	return &NullableNoteTagsInner{value: val, isSet: true}
}

func (v NullableNoteTagsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteTagsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


