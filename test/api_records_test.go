/*
Attio API

Testing RecordsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package libattio

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	libattio "github.com/fastah/libattio"
)

func Test_libattio_RecordsAPIService(t *testing.T) {

	configuration := libattio.NewConfiguration()
	apiClient := libattio.NewAPIClient(configuration)

	t.Run("Test RecordsAPIService V2ObjectsObjectRecordsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var object string

		resp, httpRes, err := apiClient.RecordsAPI.V2ObjectsObjectRecordsPost(context.Background(), object).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecordsAPIService V2ObjectsObjectRecordsPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var object string

		resp, httpRes, err := apiClient.RecordsAPI.V2ObjectsObjectRecordsPut(context.Background(), object).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecordsAPIService V2ObjectsObjectRecordsQueryPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var object string

		resp, httpRes, err := apiClient.RecordsAPI.V2ObjectsObjectRecordsQueryPost(context.Background(), object).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecordsAPIService V2ObjectsObjectRecordsRecordIdAttributesAttributeValuesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var object string
		var recordId string
		var attribute string

		resp, httpRes, err := apiClient.RecordsAPI.V2ObjectsObjectRecordsRecordIdAttributesAttributeValuesGet(context.Background(), object, recordId, attribute).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecordsAPIService V2ObjectsObjectRecordsRecordIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var object string
		var recordId string

		resp, httpRes, err := apiClient.RecordsAPI.V2ObjectsObjectRecordsRecordIdDelete(context.Background(), object, recordId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecordsAPIService V2ObjectsObjectRecordsRecordIdEntriesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var object string
		var recordId string

		resp, httpRes, err := apiClient.RecordsAPI.V2ObjectsObjectRecordsRecordIdEntriesGet(context.Background(), object, recordId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecordsAPIService V2ObjectsObjectRecordsRecordIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var object string
		var recordId string

		resp, httpRes, err := apiClient.RecordsAPI.V2ObjectsObjectRecordsRecordIdGet(context.Background(), object, recordId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecordsAPIService V2ObjectsObjectRecordsRecordIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var object string
		var recordId string

		resp, httpRes, err := apiClient.RecordsAPI.V2ObjectsObjectRecordsRecordIdPatch(context.Background(), object, recordId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RecordsAPIService V2ObjectsObjectRecordsRecordIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var object string
		var recordId string

		resp, httpRes, err := apiClient.RecordsAPI.V2ObjectsObjectRecordsRecordIdPut(context.Background(), object, recordId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
