/*
Attio API

Testing EntriesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package libattio

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	libattio "github.com/fastah/libattio"
)

func Test_libattio_EntriesAPIService(t *testing.T) {

	configuration := libattio.NewConfiguration()
	apiClient := libattio.NewAPIClient(configuration)

	t.Run("Test EntriesAPIService V2ListsListEntriesEntryIdAttributesAttributeValuesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var list string
		var entryId string
		var attribute string

		resp, httpRes, err := apiClient.EntriesAPI.V2ListsListEntriesEntryIdAttributesAttributeValuesGet(context.Background(), list, entryId, attribute).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntriesAPIService V2ListsListEntriesEntryIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var list string
		var entryId string

		resp, httpRes, err := apiClient.EntriesAPI.V2ListsListEntriesEntryIdDelete(context.Background(), list, entryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntriesAPIService V2ListsListEntriesEntryIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var list string
		var entryId string

		resp, httpRes, err := apiClient.EntriesAPI.V2ListsListEntriesEntryIdGet(context.Background(), list, entryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntriesAPIService V2ListsListEntriesEntryIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var list string
		var entryId string

		resp, httpRes, err := apiClient.EntriesAPI.V2ListsListEntriesEntryIdPatch(context.Background(), list, entryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntriesAPIService V2ListsListEntriesEntryIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var list string
		var entryId string

		resp, httpRes, err := apiClient.EntriesAPI.V2ListsListEntriesEntryIdPut(context.Background(), list, entryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntriesAPIService V2ListsListEntriesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var list string

		resp, httpRes, err := apiClient.EntriesAPI.V2ListsListEntriesPost(context.Background(), list).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntriesAPIService V2ListsListEntriesPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var list string

		resp, httpRes, err := apiClient.EntriesAPI.V2ListsListEntriesPut(context.Background(), list).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EntriesAPIService V2ListsListEntriesQueryPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var list string

		resp, httpRes, err := apiClient.EntriesAPI.V2ListsListEntriesQueryPost(context.Background(), list).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
