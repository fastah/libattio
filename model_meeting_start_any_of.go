/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package libattio

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MeetingStartAnyOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeetingStartAnyOf{}

// MeetingStartAnyOf struct for MeetingStartAnyOf
type MeetingStartAnyOf struct {
	// If a non-all day event, a datetime representing when the meeting starts. Datetimes are formatted as UTC if no timezone is available. If a timezone is available, the datetime will offset using the specified timezone.
	Datetime string `json:"datetime"`
	// The IANA timezone in which the meeting starts, if available.
	Timezone NullableString `json:"timezone"`
}

type _MeetingStartAnyOf MeetingStartAnyOf

// NewMeetingStartAnyOf instantiates a new MeetingStartAnyOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeetingStartAnyOf(datetime string, timezone NullableString) *MeetingStartAnyOf {
	this := MeetingStartAnyOf{}
	this.Datetime = datetime
	this.Timezone = timezone
	return &this
}

// NewMeetingStartAnyOfWithDefaults instantiates a new MeetingStartAnyOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeetingStartAnyOfWithDefaults() *MeetingStartAnyOf {
	this := MeetingStartAnyOf{}
	return &this
}

// GetDatetime returns the Datetime field value
func (o *MeetingStartAnyOf) GetDatetime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Datetime
}

// GetDatetimeOk returns a tuple with the Datetime field value
// and a boolean to check if the value has been set.
func (o *MeetingStartAnyOf) GetDatetimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Datetime, true
}

// SetDatetime sets field value
func (o *MeetingStartAnyOf) SetDatetime(v string) {
	o.Datetime = v
}


// GetTimezone returns the Timezone field value
// If the value is explicit nil, the zero value for string will be returned
func (o *MeetingStartAnyOf) GetTimezone() string {
	if o == nil || o.Timezone.Get() == nil {
		var ret string
		return ret
	}

	return *o.Timezone.Get()
}

// GetTimezoneOk returns a tuple with the Timezone field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MeetingStartAnyOf) GetTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timezone.Get(), o.Timezone.IsSet()
}

// SetTimezone sets field value
func (o *MeetingStartAnyOf) SetTimezone(v string) {
	o.Timezone.Set(&v)
}


func (o MeetingStartAnyOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeetingStartAnyOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["datetime"] = o.Datetime
	toSerialize["timezone"] = o.Timezone.Get()
	return toSerialize, nil
}

func (o *MeetingStartAnyOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"datetime",
		"timezone",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varMeetingStartAnyOf := _MeetingStartAnyOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMeetingStartAnyOf)

	if err != nil {
		return err
	}

	*o = MeetingStartAnyOf(varMeetingStartAnyOf)

	return err
}

type NullableMeetingStartAnyOf struct {
	value *MeetingStartAnyOf
	isSet bool
}

func (v NullableMeetingStartAnyOf) Get() *MeetingStartAnyOf {
	return v.value
}

func (v *NullableMeetingStartAnyOf) Set(val *MeetingStartAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMeetingStartAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMeetingStartAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeetingStartAnyOf(val *MeetingStartAnyOf) *NullableMeetingStartAnyOf {
	return &NullableMeetingStartAnyOf{value: val, isSet: true}
}

func (v NullableMeetingStartAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeetingStartAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


