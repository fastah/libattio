/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package libattio

import (
	"encoding/json"
	"fmt"
)


// MeetingStart struct for MeetingStart
type MeetingStart struct {
	MeetingStartAnyOf *MeetingStartAnyOf
	MeetingStartAnyOf1 *MeetingStartAnyOf1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *MeetingStart) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into MeetingStartAnyOf
	err = json.Unmarshal(data, &dst.MeetingStartAnyOf);
	if err == nil {
		jsonMeetingStartAnyOf, _ := json.Marshal(dst.MeetingStartAnyOf)
		if string(jsonMeetingStartAnyOf) == "{}" { // empty struct
			dst.MeetingStartAnyOf = nil
		} else {
			return nil // data stored in dst.MeetingStartAnyOf, return on the first match
		}
	} else {
		dst.MeetingStartAnyOf = nil
	}

	// try to unmarshal JSON data into MeetingStartAnyOf1
	err = json.Unmarshal(data, &dst.MeetingStartAnyOf1);
	if err == nil {
		jsonMeetingStartAnyOf1, _ := json.Marshal(dst.MeetingStartAnyOf1)
		if string(jsonMeetingStartAnyOf1) == "{}" { // empty struct
			dst.MeetingStartAnyOf1 = nil
		} else {
			return nil // data stored in dst.MeetingStartAnyOf1, return on the first match
		}
	} else {
		dst.MeetingStartAnyOf1 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(MeetingStart)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MeetingStart) MarshalJSON() ([]byte, error) {
	if src.MeetingStartAnyOf != nil {
		return json.Marshal(&src.MeetingStartAnyOf)
	}

	if src.MeetingStartAnyOf1 != nil {
		return json.Marshal(&src.MeetingStartAnyOf1)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableMeetingStart struct {
	value *MeetingStart
	isSet bool
}

func (v NullableMeetingStart) Get() *MeetingStart {
	return v.value
}

func (v *NullableMeetingStart) Set(val *MeetingStart) {
	v.value = val
	v.isSet = true
}

func (v NullableMeetingStart) IsSet() bool {
	return v.isSet
}

func (v *NullableMeetingStart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeetingStart(val *MeetingStart) *NullableMeetingStart {
	return &NullableMeetingStart{value: val, isSet: true}
}

func (v NullableMeetingStart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeetingStart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


