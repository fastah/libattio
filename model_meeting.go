/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package libattio

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Meeting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Meeting{}

// Meeting struct for Meeting
type Meeting struct {
	Id MeetingId `json:"id"`
	// The title of the meeting.
	Title string `json:"title"`
	// The description of the meeting.
	Description string `json:"description"`
	// Whether or not the meeting is an all day event. All day events may span multiple days.
	IsAllDay bool `json:"is_all_day"`
	Start MeetingStart `json:"start"`
	End MeetingEnd `json:"end"`
	Participants []MeetingParticipantsInner `json:"participants"`
	// A list of records that are linked to the meeting. Participants with matching person records are automatically linked to the meeting but other records may also be linked explicitly.
	LinkedRecords []MeetingLinkedRecordsInner `json:"linked_records"`
	// Timestamp representing when the meeting was created.
	CreatedAt string `json:"created_at"`
	CreatedByActor MeetingCreatedByActor `json:"created_by_actor"`
}

type _Meeting Meeting

// NewMeeting instantiates a new Meeting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeeting(id MeetingId, title string, description string, isAllDay bool, start MeetingStart, end MeetingEnd, participants []MeetingParticipantsInner, linkedRecords []MeetingLinkedRecordsInner, createdAt string, createdByActor MeetingCreatedByActor) *Meeting {
	this := Meeting{}
	this.Id = id
	this.Title = title
	this.Description = description
	this.IsAllDay = isAllDay
	this.Start = start
	this.End = end
	this.Participants = participants
	this.LinkedRecords = linkedRecords
	this.CreatedAt = createdAt
	this.CreatedByActor = createdByActor
	return &this
}

// NewMeetingWithDefaults instantiates a new Meeting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeetingWithDefaults() *Meeting {
	this := Meeting{}
	return &this
}

// GetId returns the Id field value
func (o *Meeting) GetId() MeetingId {
	if o == nil {
		var ret MeetingId
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Meeting) GetIdOk() (*MeetingId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Meeting) SetId(v MeetingId) {
	o.Id = v
}


// GetTitle returns the Title field value
func (o *Meeting) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Meeting) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Meeting) SetTitle(v string) {
	o.Title = v
}


// GetDescription returns the Description field value
func (o *Meeting) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Meeting) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Meeting) SetDescription(v string) {
	o.Description = v
}


// GetIsAllDay returns the IsAllDay field value
func (o *Meeting) GetIsAllDay() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsAllDay
}

// GetIsAllDayOk returns a tuple with the IsAllDay field value
// and a boolean to check if the value has been set.
func (o *Meeting) GetIsAllDayOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsAllDay, true
}

// SetIsAllDay sets field value
func (o *Meeting) SetIsAllDay(v bool) {
	o.IsAllDay = v
}


// GetStart returns the Start field value
func (o *Meeting) GetStart() MeetingStart {
	if o == nil {
		var ret MeetingStart
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *Meeting) GetStartOk() (*MeetingStart, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *Meeting) SetStart(v MeetingStart) {
	o.Start = v
}


// GetEnd returns the End field value
func (o *Meeting) GetEnd() MeetingEnd {
	if o == nil {
		var ret MeetingEnd
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *Meeting) GetEndOk() (*MeetingEnd, bool) {
	if o == nil {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *Meeting) SetEnd(v MeetingEnd) {
	o.End = v
}


// GetParticipants returns the Participants field value
func (o *Meeting) GetParticipants() []MeetingParticipantsInner {
	if o == nil {
		var ret []MeetingParticipantsInner
		return ret
	}

	return o.Participants
}

// GetParticipantsOk returns a tuple with the Participants field value
// and a boolean to check if the value has been set.
func (o *Meeting) GetParticipantsOk() ([]MeetingParticipantsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Participants, true
}

// SetParticipants sets field value
func (o *Meeting) SetParticipants(v []MeetingParticipantsInner) {
	o.Participants = v
}


// GetLinkedRecords returns the LinkedRecords field value
func (o *Meeting) GetLinkedRecords() []MeetingLinkedRecordsInner {
	if o == nil {
		var ret []MeetingLinkedRecordsInner
		return ret
	}

	return o.LinkedRecords
}

// GetLinkedRecordsOk returns a tuple with the LinkedRecords field value
// and a boolean to check if the value has been set.
func (o *Meeting) GetLinkedRecordsOk() ([]MeetingLinkedRecordsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinkedRecords, true
}

// SetLinkedRecords sets field value
func (o *Meeting) SetLinkedRecords(v []MeetingLinkedRecordsInner) {
	o.LinkedRecords = v
}


// GetCreatedAt returns the CreatedAt field value
func (o *Meeting) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Meeting) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Meeting) SetCreatedAt(v string) {
	o.CreatedAt = v
}


// GetCreatedByActor returns the CreatedByActor field value
func (o *Meeting) GetCreatedByActor() MeetingCreatedByActor {
	if o == nil {
		var ret MeetingCreatedByActor
		return ret
	}

	return o.CreatedByActor
}

// GetCreatedByActorOk returns a tuple with the CreatedByActor field value
// and a boolean to check if the value has been set.
func (o *Meeting) GetCreatedByActorOk() (*MeetingCreatedByActor, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedByActor, true
}

// SetCreatedByActor sets field value
func (o *Meeting) SetCreatedByActor(v MeetingCreatedByActor) {
	o.CreatedByActor = v
}


func (o Meeting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Meeting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["title"] = o.Title
	toSerialize["description"] = o.Description
	toSerialize["is_all_day"] = o.IsAllDay
	toSerialize["start"] = o.Start
	toSerialize["end"] = o.End
	toSerialize["participants"] = o.Participants
	toSerialize["linked_records"] = o.LinkedRecords
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["created_by_actor"] = o.CreatedByActor
	return toSerialize, nil
}

func (o *Meeting) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"title",
		"description",
		"is_all_day",
		"start",
		"end",
		"participants",
		"linked_records",
		"created_at",
		"created_by_actor",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varMeeting := _Meeting{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMeeting)

	if err != nil {
		return err
	}

	*o = Meeting(varMeeting)

	return err
}

type NullableMeeting struct {
	value *Meeting
	isSet bool
}

func (v NullableMeeting) Get() *Meeting {
	return v.value
}

func (v *NullableMeeting) Set(val *Meeting) {
	v.value = val
	v.isSet = true
}

func (v NullableMeeting) IsSet() bool {
	return v.isSet
}

func (v *NullableMeeting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeeting(val *Meeting) *NullableMeeting {
	return &NullableMeeting{value: val, isSet: true}
}

func (v NullableMeeting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeeting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


