/*
Attio API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
Contact: support@attio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package libattio

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MeetingEndAnyOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MeetingEndAnyOf{}

// MeetingEndAnyOf struct for MeetingEndAnyOf
type MeetingEndAnyOf struct {
	// A datetime representing when the meeting ends. All day meetings will return a date whereas non-all day meetings will return a datetime. Datetimes do not include timezone information; please refer to `timezone` for timezone information. Following iCalendar RFC 5545, the `end_at` property is exclusive, meaning that the meeting ends before the specified time, not at it. For example, a one day meeting on June 3rd would have an `end_at` of June 4th, not June 3rd; a one hour meeting starting at 14:00 would have an `end_at` of 15:00, not 14:00.
	Datetime string `json:"datetime"`
	// The IANA timezone in which the meeting ends, if available.
	Timezone NullableString `json:"timezone"`
}

type _MeetingEndAnyOf MeetingEndAnyOf

// NewMeetingEndAnyOf instantiates a new MeetingEndAnyOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeetingEndAnyOf(datetime string, timezone NullableString) *MeetingEndAnyOf {
	this := MeetingEndAnyOf{}
	this.Datetime = datetime
	this.Timezone = timezone
	return &this
}

// NewMeetingEndAnyOfWithDefaults instantiates a new MeetingEndAnyOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeetingEndAnyOfWithDefaults() *MeetingEndAnyOf {
	this := MeetingEndAnyOf{}
	return &this
}

// GetDatetime returns the Datetime field value
func (o *MeetingEndAnyOf) GetDatetime() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Datetime
}

// GetDatetimeOk returns a tuple with the Datetime field value
// and a boolean to check if the value has been set.
func (o *MeetingEndAnyOf) GetDatetimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Datetime, true
}

// SetDatetime sets field value
func (o *MeetingEndAnyOf) SetDatetime(v string) {
	o.Datetime = v
}


// GetTimezone returns the Timezone field value
// If the value is explicit nil, the zero value for string will be returned
func (o *MeetingEndAnyOf) GetTimezone() string {
	if o == nil || o.Timezone.Get() == nil {
		var ret string
		return ret
	}

	return *o.Timezone.Get()
}

// GetTimezoneOk returns a tuple with the Timezone field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MeetingEndAnyOf) GetTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timezone.Get(), o.Timezone.IsSet()
}

// SetTimezone sets field value
func (o *MeetingEndAnyOf) SetTimezone(v string) {
	o.Timezone.Set(&v)
}


func (o MeetingEndAnyOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MeetingEndAnyOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["datetime"] = o.Datetime
	toSerialize["timezone"] = o.Timezone.Get()
	return toSerialize, nil
}

func (o *MeetingEndAnyOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"datetime",
		"timezone",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varMeetingEndAnyOf := _MeetingEndAnyOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMeetingEndAnyOf)

	if err != nil {
		return err
	}

	*o = MeetingEndAnyOf(varMeetingEndAnyOf)

	return err
}

type NullableMeetingEndAnyOf struct {
	value *MeetingEndAnyOf
	isSet bool
}

func (v NullableMeetingEndAnyOf) Get() *MeetingEndAnyOf {
	return v.value
}

func (v *NullableMeetingEndAnyOf) Set(val *MeetingEndAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMeetingEndAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMeetingEndAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeetingEndAnyOf(val *MeetingEndAnyOf) *NullableMeetingEndAnyOf {
	return &NullableMeetingEndAnyOf{value: val, isSet: true}
}

func (v NullableMeetingEndAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeetingEndAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


