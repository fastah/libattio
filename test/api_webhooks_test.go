/*
Attio API

Testing WebhooksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package libattio

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_libattio_WebhooksAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WebhooksAPIService V2WebhooksGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WebhooksAPI.V2WebhooksGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService V2WebhooksPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WebhooksAPI.V2WebhooksPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService V2WebhooksWebhookIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookId string

		resp, httpRes, err := apiClient.WebhooksAPI.V2WebhooksWebhookIdDelete(context.Background(), webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService V2WebhooksWebhookIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookId string

		resp, httpRes, err := apiClient.WebhooksAPI.V2WebhooksWebhookIdGet(context.Background(), webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WebhooksAPIService V2WebhooksWebhookIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var webhookId string

		resp, httpRes, err := apiClient.WebhooksAPI.V2WebhooksWebhookIdPatch(context.Background(), webhookId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
